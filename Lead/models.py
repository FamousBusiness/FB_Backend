from django.db import models
from Listings.models import Category, Business
from users.models import User
from django.utils.translation import gettext_lazy as _




LEAD_STATUS = [
    ('Open', 'Open'),
    ('Closed', 'Closed'),
    ('Expired', 'Expired'),
    ('High Priority', 'High Priority'),
    ('Premium Quality', 'Premium Quality'),
    ('Viewed', 'Viewed'),
    ('Purchased','Purchased'),
    ('Completed','Completed'),
]



class LeadPrice(models.Model):
    price = models.CharField(max_length=50)

    def __str__(self) -> str:
        return f'Lead Price: {self.price}'
    
    class Meta:
        ordering = ["-id"]


class Lead(models.Model):
    created_by    = models.CharField(max_length=225, null=True, blank=True)
    category      = models.ForeignKey(Category, on_delete=models.CASCADE)
    requirement   = models.TextField(null=True, blank=True)
    mobile_number = models.CharField(max_length=20, null=True, blank=True)
    email         = models.EmailField(null=True, blank=True)
    expired       = models.BooleanField(default=False, null=True, blank=True)
    created_at    = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    state         = models.CharField(max_length=255, null=True, blank=True)
    city          = models.CharField(max_length=255, null=True, blank=True)
    pincode       = models.CharField(max_length=255, null=True, blank=True)
    price         = models.ForeignKey(LeadPrice, on_delete=models.SET_NULL, null=True)
    address       = models.CharField(max_length=300, null=True, blank=True)
    status        = models.CharField(max_length=50, null=True, blank=True, choices=LEAD_STATUS)
    views         = models.PositiveIntegerField(default=0, null=True, blank=True)
    mail_sent     = models.BooleanField(default=False, null=True, blank=True)
    category_lead = models.BooleanField(_("Category Generated Lead"), default=False, null=True, blank=True)

    
    def __str__(self):
        return f"Lead generated by {self.created_by}"
    
    class Meta:
        ordering = ["-id"]


#Lead Data Purchased by a user(whoes donot have any business page)
class LeadBucket(models.Model):
    owner   = models.ForeignKey(User, on_delete=models.CASCADE)
    lead    = models.ForeignKey(Lead, on_delete=models.CASCADE)
    is_paid = models.BooleanField(default=False)
    viewed  = models.BooleanField(default=False)
    # status  = models.CharField(max_length=50, choices=LEAD_STATUS, null=True, blank=True)

    def __str__(self) -> str:
        return f'{self.owner.name}\'s Lead'
    
    @classmethod
    def count_paid_users(cls, lead_id):
        return cls.objects.filter(lead_id=lead_id, is_paid=True).values('owner').distinct().count()
    
    class Meta:
        ordering = ["-id"]
    


#Lead Generated for a Specific Business Page through Enquiry Form
class BusinessPageLead(models.Model):
    business_page  = models.ForeignKey(Business, on_delete=models.CASCADE)
    created_by     = models.CharField(max_length=225, null=True, blank=True)
    requirement    = models.TextField(null=True, blank=True)
    mobile_number  = models.CharField(max_length=12, null=True, blank=True)
    email          = models.EmailField(null=True, blank=True)
    expired        = models.BooleanField(default=False)
    created_at     = models.DateTimeField(auto_now_add=True)
    status         = models.CharField(max_length=100, null=True, blank=True)
    state          = models.CharField(max_length=255, null=True, blank=True)
    city           = models.CharField(max_length=255, null=True, blank=True)
    pincode        = models.CharField(max_length=255, null=True, blank=True)
    price          = models.CharField(max_length=100, null=True, blank=True)
    address        = models.CharField(max_length=300, null=True, blank=True)
    views          = models.PositiveIntegerField(default=0)


    def __str__(self) -> str:
        return f'{self.business_page.business_name}'
    
    class Meta:
        ordering = ["-id"]
    



#Lead data Purchased by a Business Page(Business Owner Data)
class BusinessPageLeadBucket(models.Model):
    business_page  = models.ForeignKey(Business, on_delete=models.CASCADE)
    lead           = models.ForeignKey(Lead, on_delete=models.SET_NULL, null=True)
    is_paid        = models.BooleanField(default=False)


    def __str__(self) -> str:
        return f'{self.business_page.business_name}\'s Lead Bucket'
    
    
    @classmethod
    def count_paid_users(cls, lead_id):
        return cls.objects.filter(lead_id=lead_id, is_paid = True).values('business_page').distinct().count()
    
    class Meta:
        ordering = ["-id"]
    


class ComboLead(models.Model):
    name          = models.CharField(_("Combo Lead"), max_length=100)
    benefit       = models.CharField(_("Lead Benefits"), max_length=500)
    tag_line      = models.CharField(_("Tag Line"), max_length=500)
    image         = models.ImageField(_("Image"), upload_to='Combo_Lead/', height_field=None, width_field=None, default='Combo_Lead/default.png')
    lead_quantity = models.BigIntegerField(_("Lead Quantity"))
    price         = models.CharField(_("Price"), max_length=50)


    def __str__(self):
        return self.name
    
    class Meta:
        ordering = ["-id"]
    


class ComboLeadBucket(models.Model):
    owner          = models.ForeignKey(User, on_delete=models.CASCADE)
    combolead      = models.ForeignKey(ComboLead, on_delete=models.CASCADE)
    category       = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)
    remaining_lead = models.IntegerField(_("Remaining Lead Quantity"), null=True, blank=True)
    is_paid        = models.BooleanField(default=False)
    expired        = models.BooleanField(default=False)


    def __str__(self):
        return f"{self.combolead.name}\'s Benefits"
    
    class Meta:
        ordering = ["-id"]



class ComboLeadOrder(models.Model):
    user               = models.ForeignKey(User, on_delete=models.CASCADE)
    transaction_id     = models.CharField(_("Transaction ID"), max_length=100, unique=True)
    amount             = models.PositiveIntegerField(_("Amount"), null=True, blank=False)
    provider_reference_id  = models.CharField(
        _("Provider Reference ID"), max_length=40, null=False, blank=False
    )
    merchant_id        = models.CharField(_("Merchant ID"), null=False, blank=False)
    merchant_order_id  = models.CharField(_("Merchant Order ID"), null=True, blank=True, max_length=100)
    checksum           = models.CharField(_("Checksum"), null=True, blank=True)
    status             = models.CharField(_("Payment Status"), default="Pending", max_length=254,
        blank=False,
        null=False,
    )
    details            = models.CharField(max_length=255, null=True, blank=True)
    currency           = models.CharField(max_length=50, default='INR')
    message            = models.CharField(_("Phonepe Message"), default="Phonpe Message", blank=True, null=True, max_length=100)
    purchased_at       = models.DateTimeField(_("Purchased Date"), auto_now_add=True)
    isPaid             = models.BooleanField(default=False)


    def __str__(self):
        return f"{self.id}-{self.status}"
    
    class Meta:
        ordering = ["-id"]


class LeadOrder(models.Model):
    user               = models.ForeignKey(User, on_delete=models.CASCADE)
    transaction_id     = models.CharField(_("Transaction ID"), max_length=100, unique=True)
    amount             = models.PositiveIntegerField(_("Amount"), null=True, blank=False)
    provider_reference_id  = models.CharField(
        _("Provider Reference ID"), max_length=40, null=False, blank=False
    )
    merchant_id        = models.CharField(_("Merchant ID"), null=False, blank=False)
    merchant_order_id  = models.CharField(_("Merchant Order ID"), null=True, blank=True, max_length=100)
    checksum           = models.CharField(_("Checksum"), null=True, blank=True)
    status             = models.CharField(_("Payment Status"), default="Pending", max_length=254,
        blank=False,
        null=False,
    )
    details            = models.CharField(max_length=255, null=True, blank=True)
    currency           = models.CharField(max_length=50, default='INR')
    message            = models.CharField(_("Phonepe Message"), default="Phonpe Message", blank=True, null=True, max_length=100)
    purchased_at       = models.DateTimeField(_("Purchased Date"),auto_now_add=True)
    isPaid             = models.BooleanField(default=False)
    

    def __str__(self):
        return f"{self.id}-{self.status}"
    
    # def save(self, *args, **kwargs):
    #     if not self.transaction_id:
    #         self.transaction_id = uuid.uuid4()
    #     super(LeadOrder, self).save(*args, **kwargs)

    class Meta:
        ordering = ["-id"]



# Lead assigned for Premium users
class AssignedLeadPerPremiumPlan(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    lead = models.ForeignKey(Lead, on_delete=models.SET_NULL, null=True)

    def __str__(self):
        return f"{self.user.name}\'s Lead"
    
    class Meta:
        ordering = ["-id"]
    



#Lead viewed by Business Page of Enquired lead
class BusinessPageEnquiredLeadViews(models.Model):
    business_page = models.ForeignKey(Business, on_delete=models.CASCADE)
    page_lead     = models.ForeignKey(BusinessPageLead, on_delete=models.CASCADE)
    viewed        = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.business_page.business_name}\'s Lead View"
    
    class Meta:
        ordering = ["-id"]



#Lead Viewed by Business Page
class BusinessPageLeadView(models.Model):
    business_page = models.ForeignKey(Business, on_delete=models.CASCADE)
    lead          = models.ForeignKey(Lead, on_delete=models.CASCADE)
    viewed        = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.business_page.business_name}\'s Lead View"
    
    class Meta:
        ordering = ['-id']



### Manual Lead Expired Quantity
class LeadViewQuantity(models.Model):
    category = models.ForeignKey(Category, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=5)

    def __str__(self) -> str:
        return f"{self.category.type} Lead View Quantity"
    



## Lead Form Questions
class LeadFormQuestion(models.Model):
    question = models.CharField(max_length=100)


    def __str__(self) -> str:
        return f'{self.question}'
    


### Lead Form
class LeadFrorm(models.Model):
    category        = models.ForeignKey(Category, verbose_name=_("Category"), on_delete=models.CASCADE)
    headline        = models.CharField(max_length=100)

    city            = models.CharField(_("City"), max_length=20, null=True, blank=True)
    city_required   = models.BooleanField(_("City Required"), default=False, null=True, blank=True)

    state            = models.CharField(_("State"), max_length=20, null=True, blank=True)
    state_required   = models.BooleanField(_("State Required"), default=False, null=True, blank=True)

    description_1   = models.CharField(_("Description 1"), max_length=100)
    d1_required     = models.BooleanField(_("Description 1 Required"), default=False)

    description_2   = models.CharField(_("Description 2"), max_length=100, null=True, blank=True)
    d2_required     = models.BooleanField(_("Description 2 Required"), default=False)

    description_3   = models.CharField(_("Description 3"), max_length=100, null=True, blank=True)
    d3_required     = models.BooleanField(_("Description 3 Required"), default=False)

    question_1      = models.ForeignKey(LeadFormQuestion, verbose_name=_("Question 1"), on_delete=models.CASCADE, related_name="leadform_question_1")
    q1_required     = models.BooleanField(_("Question 1 Required"), default=False)

    question_2      = models.ForeignKey(LeadFormQuestion, verbose_name=_("Question 2"), on_delete=models.CASCADE, related_name="leadform_question_2", null=True, blank=True)
    q2_required     = models.BooleanField(_("Question 2 Required"), default=False)

    question_3      = models.ForeignKey(LeadFormQuestion, verbose_name=_("Question 3"), on_delete=models.CASCADE, related_name="leadform_question_3", null=True, blank=True)
    q3_required     = models.BooleanField(_("Question 3 Required"), default=False)

    question_4      = models.ForeignKey(LeadFormQuestion, verbose_name=_("Question 4"), on_delete=models.CASCADE, related_name="leadform_question_4", null=True, blank=True)
    q4_required     = models.BooleanField(_("Question 4 Required"), default=False)

    background_img  = models.ImageField(_("Background Image"), upload_to='LeadForm/', null=True, blank=True)
    logo            = models.ImageField(_("Logo"), upload_to='LeadForm', null=True, blank=True)


    def __str__(self) -> str:
        return f"{self.headline}"
    



    
